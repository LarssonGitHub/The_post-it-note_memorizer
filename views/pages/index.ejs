<!DOCTYPE html>
<html lang="en">
<!-- make the fetches for crud (put, post, delete)
element added after post, put, appended to the dom (fake)
element removed, removed from the dom (fake)
work on css and svg
 -->

<!-- index
login
register -->

<!-- backend, clean up... and make response alert user after send (client side and backend)-->

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Post it note</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
    integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
  <link rel="stylesheet" href="/css/main.min.css">
  <style>

  </style>
</head>

<body class="mt-3 ml-2 mr-2 mb-1">

  <header class="d-flex flex-wrap justify-content-between align-items-center align-content-center sticky-top">
    <div id="headerMessage" class="position-relative flex-grow-1 text-left pt-3 pr-4 pl-4 pb-3">
      <h1> <%= headerMessage %> </h1>
      <h4 class="text-right"><%= user %></h4>
      <a id="logoutBtn" class="position-absolute pt-2 pr-4 pl-4 pb-2" href="/user/logout">Logout</a>
    </div>

    <div class="flex-grow-1 text-center">
      <a id="nukeDatabase" href="/nuke/database"><img src="/assets/SVG/deleteButton.svg" alt="nuleBtn" width="70"></a>
    </div>


    <div id="headerChildOne" class="flex-grow-1 text-right">
      <!-- <div class="svg-container">
        <svg class="svg-item" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 405.51 381.31" preserveAspectRatio="none">
          <defs>
            <style>
              .cls-1 {
                fill: #ffca34;
              }

              .cls-2 {
                fill: #648eb2;
              }

              .cls-3 {
                fill: #91af37;
              }

              .cls-4 {
                fill: #fca838;
              }

              .cls-5 {
                fill: #d82b40;
              }
            </style>
          </defs>
          <g id="Layer_2" data-name="Layer 2">
            <g id="Layer_1-2" data-name="Layer 1">
              <g id="Group_3" data-name="Group 3">
                <path id="Path_11" data-name="Path 11" class="cls-1"
                  d="M377.35,26.68S47.22,4.13,35.17,5.26L0,363.25s254.17,22.8,350.53,17.17C350.53,380.42,363.37,375.57,377.35,26.68Z" />
              </g>
              <g id="Group_5" data-name="Group 5">
                <path id="Path_16" data-name="Path 16" class="cls-2"
                  d="M46.07,1.49,40.8,364.65s154.45,20.43,319.06-7.94c5.15-5.68,12.35-21.57,13.38-132.78S377.35,8.16,377.35,8.16,110.89-4.18,46.07,1.49Z" />
              </g>
              <g id="Group_6" data-name="Group 6">
                <path id="Path_18" data-name="Path 18" class="cls-3"
                  d="M40.8,12.06l5.64,301.59s182,3.35,233-19.95c0,0,7.52-.94,7.52-113.5S284.66,6.38,284.66,6.38,124.08,1.41,40.8,12.06Z" />
              </g>
              <g id="Group_1" data-name="Group 1">
                <path id="Path_7" data-name="Path 7" class="cls-4"
                  d="M58.85,13.76c-2.81,10.33,2.8,240.5,22,342.8,0,0,170.73,8.23,274.57-10.13L337.62,0Z" />
              </g>
              <g id="Group_2" data-name="Group 2">
                <path id="Path_9" data-name="Path 9" class="cls-5"
                  d="M404.14,11.3S198.6-.12,128,11.3c0,0-15.3,228.45,11.05,319.83,2.55,2.08,25.51,18.55,113.93,15s146.23,0,146.23,0S409,78.8,404.14,11.3Z" />
              </g>
            </g>
          </g>
        </svg>
        <div id="svgChild2">
          <svg id="svgForm" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 264.25 301.97" width="200" height="200"
            preserveAspectRatio="none">
            <defs>
              <style>
                .cls-1 {
                  fill: #ffca34;
                }
              </style>
            </defs>
            <g id="Layer_2" data-name="Layer 2">
              <g id="Layer_1-2" data-name="Layer 1">
                <g id="Group_4" data-name="Group 4">
                  <path id="Path_13" data-name="Path 13" class="cls-1"
                    d="M0,17.65S86.38,12.22,144.35,7.47,243.8,0,243.8,0s20.45,260,20.45,288.45c0,0-170.48,19.69-229.58,11.54-4-.68-22-49.87-24.44-118.77S0,17.65,0,17.65Z" />
                </g>
              </g>
            </g>
          </svg>
        </div>
        <form id="postForm" action="/post" method="POST">
          <input type="text" name="headline" placeholder="headline" required>
          <textarea name="notes" placeholder="notes"></textarea>
          <button type="submit">Add Post-it</button>
        </form>
      </div> -->
    </div>

  </header>

  <p> bottom-50% end-50%.. Postion doesn't work in bootstrap</p>

  <p><%= errorMessage %></p>
  <main id="eventDeligationContainer"
    class="d-flex flex-wrap justify-content-around align-items-center align-content-center">

    <form id="postForm">
      <input type="text" name="headlineValue" placeholder="Mr PostIt, at your service" required>
      <textarea name="bodyTextValue" placeholder="notes"></textarea>
      <select id="colorSelect" name="colorSelect">
        <option value="Green">Green</option>
        <option value="Blue">Blue</option>
        <option value="Red">Red</option>
        <option value="Yellow">Yellow</option>
      </select>
      <input type="hidden" id="userIDValue" name="userIDValue" value="">
      <button type="submit">Add Post-it</button>
    </form>

    <% results.forEach(function(object) { %>
    <div class="postItColor<%= object.colorSelect %> containerChild m-2 p-2" id="<%= object.id %>">
      <button class="btnVisiblity displayHide displayShow editBtn">Edit</button>
      <h2 class="headline" contenteditable="false"><%= object.headline %> </h2>
      <p class="bodyText" contenteditable="false"><%= object.bodyText %></p>
      <select class="colorSelect btnVisiblity displayHide" id="colorSelect" name="colorSelect">
        <option value="Green">Green</option>
        <option value="Blue">Blue</option>
        <option value="Red">Red</option>
        <option value="Yellow">Yellow</option>
      </select>
      <p class="colorSelect">makeSelectablecollor with <selcter>or something</selcter>...!</p>
      <p class="userID" hidden><%= object.userID %> </p>
      <button class="btnVisiblity displayHide displayShow deleteBtn" id="<%= object.id %>">Delete</button>
    </div>
    <% }); %>


  </main>

  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous">
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"
    integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous">
  </script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"
    integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous">
  </script>


  <script>

    const postForm = document.getElementById('postForm');


  postForm.addEventListener("submit", e => {
    e.preventDefault()

    const formDataValues = new FormData(e.target);

    const options = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(Object.fromEntries(formDataValues))
    };
    fetch('post/', options)
        .then(resp => resp.json())
        .then(data => {
          //make fetch update..!
            console.log(data);
          
        }).catch(err => {
            console.log(err);
       
        });
})


    const eventDeligationContainer = document.getElementById('eventDeligationContainer');


    function childContainerElementValues(childContainer) {
      let dataBaseId = childContainer.id;
      let headline = childContainer.querySelector(".headline").textContent;
      let BodyText = childContainer.querySelector(".bodyText").textContent;
      let colorSelect = childContainer.querySelector(".colorSelect").value;
      let userID = childContainer.querySelector(".userID").textContent;
      return {
        id: dataBaseId,
        headlineValue: headline,
        bodyTextValue: BodyText,
        colorSelectValue: colorSelect,
        userIDValue: userID
      }
    }

    function childContainerElements(childContainer) {
      let headline = childContainer.querySelector(".headline");
      let bodyText = childContainer.querySelector(".bodyText");
      let colorSelect = childContainer.querySelector(".colorSelect");
      let userID = childContainer.querySelector(".userID");
      return {
        headline: headline,
        bodyText: bodyText,
        colorSelect: colorSelect,
        userID: userID
      }
    }

    function makeElementsEditable(childContainer) {
      let {
        headline,
        bodyText,
        colorSelect,
      } = childContainerElements(childContainer);

      let headlineAttribute = headline.getAttribute('contenteditable');
      let bodyTextAttribute = bodyText.getAttribute('contenteditable');

      if (headlineAttribute === 'false' && bodyTextAttribute === 'false') {
        headline.contentEditable = 'true';
        bodyText.contentEditable = 'true';
        return;
      }
      if (headlineAttribute === 'true' && bodyTextAttribute === 'true') {
        headline.contentEditable = 'false';
        bodyText.contentEditable = 'false';
      }
    }

    function staticBtnsVisiblity() {
      let allStaticBtns = eventDeligationContainer.querySelectorAll(".btnVisiblity");

      //Used in conjuction with css, less javascript code, displayShow = visible, displayHide = none;
      allStaticBtns.forEach(btn => {
        if (!btn.classList.contains('displayShow')) {
          btn.classList.add('displayShow')
          return
        }
        if (btn.classList.contains('displayShow')) {
          btn.classList.remove('displayShow')
        }
      });
    }

    function createNodeBtn(textNode, idName) {
      const createBtn = document.createElement('BUTTON');
      createBtn.innerHTML = textNode;
      createBtn.id = idName;
      return createBtn;
    }

    function addDynamicBtns(childContainer) {
      const backBtn = createNodeBtn('back', 'abortEditBtn');
      const saveBtn = createNodeBtn('Save Edits', 'saveEditsBtn');
      childContainer.insertBefore(backBtn, childContainer.firstChild)
      childContainer.insertBefore(saveBtn, childContainer.firstChild)
    }

    function removeDynamicBtns(childContainer) {
      const grabBackBtn = childContainer.querySelector("#abortEditBtn")
      const grabSaveBtn = childContainer.querySelector("#saveEditsBtn")
      childContainer.removeChild(grabSaveBtn);
      childContainer.removeChild(grabBackBtn);
    }

    //Fetch methods...

    function fetchDelete(childContainer) {

      let allChildContainerValues = childContainerElementValues(childContainer)
      let ChildContainerID = allChildContainerValues.id;
      const options = {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      };
      fetch('/' + ChildContainerID, options)
        .then(response => response.json())
        .then(data => {
          //alert notfication..! and delete without reloading site
          console.log(data);
        }).catch((error) => {
          console.error('Error:', error);
        });
    }

    function callPutFetch(childContainer) {

      let allChildContainerValues = childContainerElementValues(childContainer)
      let ChildContainerID = allChildContainerValues.id;

      const options = {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(allChildContainerValues)
      };
      fetch('/' + ChildContainerID, options)
        .then(resp => resp.json())
        .then(data => {

          //make alert and update function..
          console.log(data);
     

        }).catch(err => {
          console.log(err);
         
        });
    }

    function deleteEvent(childContainer) {
      let {
        headlineValue
      } = childContainerElementValues(childContainer)

      let willDelete = confirm('Are you sure you want to delete ' + headlineValue + "?")

      if (willDelete) {
        fetchDelete(childContainer)
        return;
      }
      console.log("Alright, good you didn't :D");
    }


    function saveEdits(childContainer) {
      let willSaveEdits = confirm("You want to save this post it note?");
      if (willSaveEdits) {
        callPutFetch(childContainer)
        removeDynamicBtns(childContainer)
        staticBtnsVisiblity()
        makeElementsEditable(childContainer)
      }
    }

    function abortEditedContainer(childContainer) {
      let cancel = confirm("are you sure you want to leave? Your note won't be saved")
      if (cancel) {
        removeDynamicBtns(childContainer)
        staticBtnsVisiblity()
        makeElementsEditable(childContainer)
      }
    }



    function editEvent(childContainer) {
      makeElementsEditable(childContainer)
      staticBtnsVisiblity()
      addDynamicBtns(childContainer)
    }


    function validatEventAction(event, childContainer) {
      let eventTargetActionRef = event.target;
      if (eventTargetActionRef.matches('.editBtn')) {
        editEvent(childContainer)
        return;
      }
      if (eventTargetActionRef.matches('.deleteBtn')) {
        deleteEvent(childContainer)
        return;
      }
      if (eventTargetActionRef.matches('#saveEditsBtn')) {
        saveEdits(childContainer)
        return;
      }
      if (eventTargetActionRef.matches('#abortEditBtn')) {
        abortEditedContainer(childContainer)
        return;
      }
    }


    function grabChild(event) {
      let eventTargetRef = event.target;
      if (eventTargetRef.matches('#eventDeligationContainer')) {
        return;
      }
      if (!eventTargetRef.matches('.containerChild')) {
        eventTargetRef = eventTargetRef.parentNode;
      }
      return eventTargetRef;
    }

    function grabContainerChild(event) {
      let childContainer = grabChild(event)
      if (!childContainer || "") {
        return;
      }
      validatEventAction(event, childContainer)
    }


    eventDeligationContainer.addEventListener('click', (event) => {
      grabContainerChild(event);
    })


    const nukeBtn = document.getElementById('nukeDatabase')
    
    nukeBtn.addEventListener('click', (e) => {
          e.preventDefault()
          let doit = confirm("Are you sure you want to nuke everything?")
          if (!doit) {
            return;
          }
          let really = confirm("YOU CAN NOT REGRET THIS!!")
          if (!really) {
            console.log('phew...');
            return;
          }
          //put effects and bomb here if you have time..!

          fetch('/nuke/database', {
              method: 'DELETE',
            })
            .then(response => response.json())
            .then(data => {
              console.log(data)
            }).catch((error) => {
              console.error('Error:', error);
            });
        })

  </script>

</body>

</html>